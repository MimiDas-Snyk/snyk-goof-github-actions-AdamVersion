name: Snyk Security Scan

on:
  push:
  pull_request:

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          npm install
          npm install http-signature

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master

      - name: Run Snyk test (non-blocking)
        run: snyk test --all-projects --detection-depth=2 --exclude=node_modules
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Run Snyk monitor (optional)
        run: snyk monitor --all-projects --detection-depth=2 --exclude=node_modules
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Generate SARIF report
        run: snyk test --sarif-file-output=snyk.sarif --all-projects --detection-depth=2 --exclude=node_modules --severity-threshold=low
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Sanitize SARIF (rules & results)
        run: |
          node -e "
          const fs = require('fs');
          const path = 'snyk.sarif';
          const sarif = JSON.parse(fs.readFileSync(path, 'utf8'));
          let fixed = false;

          for (const run of sarif.runs || []) {
            const rules = run.tool?.driver?.rules || [];
            for (const rule of rules) {
              if (typeof rule?.properties?.securitySeverity !== 'number') {
                if (!rule.properties) rule.properties = {};
                rule.properties.securitySeverity = 3.0;
                fixed = true;
              }
            }

            const results = run.results || [];
            for (const result of results) {
              if (typeof result?.properties?.securitySeverity !== 'number') {
                if (!result.properties) result.properties = {};
                result.properties.securitySeverity = 3.0;
                fixed = true;
              }
            }
          }

          if (fixed) {
            fs.writeFileSync(path, JSON.stringify(sarif, null, 2));
            console.log('✅ SARIF sanitized and saved.');
          } else {
            console.log('✅ SARIF already clean.');
          }
          "

      - name: Upload SARIF to GitHub Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

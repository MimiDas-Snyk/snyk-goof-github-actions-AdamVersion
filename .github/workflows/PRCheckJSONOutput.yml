name: Snyk OSS Scan with PR Comment (Deduped Criticals/Highs)

on:
  

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  snyk-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master

      - name: Run Snyk test and save JSON
        run: snyk test --json | tee snyk-results.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Create PR comment with deduped top vulnerabilities
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('snyk-results.json', 'utf8'));
            const vulns = results.vulnerabilities || [];

            // Only keep high and critical
            const filtered = vulns.filter(v => ['high', 'critical'].includes(v.severity));

            // Dedupe by package@version + title
            const seen = new Set();
            const deduped = filtered.filter(v => {
              const key = `${v.packageName}@${v.version}:${v.title}`;
              if (seen.has(key)) return false;
              seen.add(key);
              return true;
            });

            // Format top 10
            const top = deduped.slice(0, 10);
            let commentBody = "";

            if (top.length === 0) {
              commentBody = "âœ… No critical or high Snyk vulnerabilities found!";
            } else {
              const summary = top
                .map(v => `- **${v.severity.toUpperCase()}**: \`${v.packageName}@${v.version}\` - ${v.title}`)
                .join('\n');

              commentBody = `### ðŸ”’ Top Snyk Vulnerabilities (Critical/High Only)\n\n${summary}\n\n_Only showing top 10 unique results._`;
            }

            const pr = context.payload.pull_request.number;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body: commentBody
            });

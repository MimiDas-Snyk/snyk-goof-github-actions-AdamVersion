name: Snyk OSS Summary with PR Comment

on:
  pull_request:
  push:

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  snyk-oss-summary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master

      - name: Run Snyk OSS scan
        run: snyk test --all-projects --json > snyk-oss-results.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Generate PR comment summary
        run: |
          node <<'EOF'
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('snyk-oss-results.json', 'utf8'));
          const severityRank = s => ({critical:4, high:3, medium:2, low:1}[s] || 0);
          const manifestGroups = {};

          for (const project of data.projects || []) {
            const file = project.targetFile || 'unknown';
            for (const vuln of project.vulnerabilities || []) {
              manifestGroups[file] = manifestGroups[file] || [];
              manifestGroups[file].push(vuln);
            }
          }

          let output = '## \ud83d\udd10 Snyk OSS Vulnerabilities by Manifest\n\n';
          for (const file in manifestGroups) {
            const vulns = manifestGroups[file]
              .sort((a, b) => severityRank(b.severity) - severityRank(a.severity))
              .slice(0, 5); // Top 5 by severity

            output += `### \ud83d\udcc6 ${file}\n`;
            output += `| Severity | Package | Title | Fix Available |\n`;
            output += `|----------|---------|-------|----------------|\n`;
            for (const v of vulns) {
              const fix = v.fixedIn?.[0] || 'N/A';
              output += `| ${v.severity.toUpperCase()} | ${v.packageName}@${v.version} | ${v.title} | ${fix} |\n`;
            }
            output += '\n';
          }

          fs.writeFileSync('pr-comment.md', output);
          EOF

      - name: Add summary to PR Checks tab
        run: cat pr-comment.md >> $GITHUB_STEP_SUMMARY

      - name: Post comment to PR
        if: github.event_name == 'pull_request'
        run: gh pr comment "$PR_URL" --body-file pr-comment.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}
